/* Generated By:JJTree: Do not edit this line. ASTExponentialExp.java */

package wvustat.math.expression;

public class ASTExponentialExp extends Expression{
    public ASTExponentialExp(int id) {
	super(id);
    }

    public ASTExponentialExp(ExpressionParser p, int id) {
	super(p, id);
    }

    public int getReturnType(){
	return Expression.NUMERICAL;
    }

    public Object getValue() throws ExecError{
	return new Double(getDoubleValue());
    }

    public double getDoubleValue() throws ExecError{
	double op1 = ((Expression)jjtGetChild(0)).getDoubleValue();
	double op2 = ((Expression)jjtGetChild(1)).getDoubleValue();

	return Math.pow(op1, op2);
    }

    public boolean getBooleanValue() throws ExecError{
	Double d = new Double(getDoubleValue());
	return d.intValue() != 0;
    }

    public String toString(){
	return "(" + jjtGetChild(0).toString() + ") ^ (" + 
	    jjtGetChild(1).toString() + ")";
    }
    
    public String derivativeString(String symbol) throws ExecError{
    		String pow, part1, part2, part3, part4;
    		
    		if(!((Expression)jjtGetChild(1)).functionOf(symbol)){
    			pow = "(" + jjtGetChild(1).toString() + ")" + "-" + "1";
    			part1 = "(" + jjtGetChild(0).toString() + ")" + "^" + "(" + pow +")";
    			part2 = "(" + jjtGetChild(1).toString() + ")" + "*" + "(" + part1 +")";
    			return part2 + "*" + "(" + ((Expression)jjtGetChild(0)).derivativeString(symbol) + ")";
    		}
    		else if(!((Expression)jjtGetChild(0)).functionOf(symbol)){
    			// d(a^x)/dx=lna*a^x
    			part1 = "ln("+ jjtGetChild(0).toString() + ")";
    			part2 = part1 + "*" + this.toString();
    			return part2 + "*" + "(" + ((Expression)jjtGetChild(1)).derivativeString(symbol) + ")";
    		}
    		else{
    			throw new ExecError("Can not take derivative of this function!");
    		}
    	
    }
}
