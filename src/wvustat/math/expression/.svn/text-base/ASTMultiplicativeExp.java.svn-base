/* Generated By:JJTree: Do not edit this line. ASTMultiplicativeExp.java */

package wvustat.math.expression;

public class ASTMultiplicativeExp extends Expression{
    private String operator = null;

    public ASTMultiplicativeExp(int id) {
	super(id);
    }

    public ASTMultiplicativeExp(ExpressionParser p, int id) {
	super(p, id);
    }

    public int getReturnType(){
	return Expression.NUMERICAL;
    }

    public void setOperator(String op){
	operator = op;
    }

    public String getOperator(){
	return operator;
    }

    public Object getValue() throws ExecError{
	return new Double(getDoubleValue());
    }

    public double getDoubleValue() throws ExecError{
	double op1 = ((Expression)jjtGetChild(0)).getDoubleValue();
	double op2 = ((Expression)jjtGetChild(1)).getDoubleValue();

	if("*".equals(operator))
	    return op1 * op2;
	else if("/".equals(operator))
	    return op1 / op2;

	throw new ExecError("Unsupport operator: " + operator);
    }

    public boolean getBooleanValue() throws ExecError{
	Double d = new Double(getDoubleValue());

	return d.intValue() != 0;
    }

    public String toString(){
	return "(" + jjtGetChild(0).toString() + ") " + operator +
	    " (" + jjtGetChild(1).toString() + ")";
    }
    
    public String derivativeString(String symbol) throws ExecError{
    		String part1, part2, part3, part4;
    		
    		part1 = "(" + ((Expression)jjtGetChild(0)).derivativeString(symbol) + ") "+ "*" + " (" +
			jjtGetChild(1).toString() + ")";
		part2 = "(" + jjtGetChild(0).toString() + ") " + "*" + " (" +
			((Expression)jjtGetChild(1)).derivativeString(symbol) + ")";
		
    		if("*".equals(operator)){	
    			return part1 + "+" + part2;
    		}
    		else if("/".equals(operator)){
    			part3 = part1 + "-" + part2;
    			part4 = "(" + jjtGetChild(1).toString() + ")" + "^2";
    			return "(" + part3 +") " + "/" + " (" + part4 +")"; 
    		}
    	
    		throw new ExecError("Unsupport operator: " + operator);
    }
}
