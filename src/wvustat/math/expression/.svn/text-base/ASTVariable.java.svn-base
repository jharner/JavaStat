/* Generated By:JJTree: Do not edit this line. ASTVariable.java */

package wvustat.math.expression;

public class ASTVariable extends Expression implements VariableExpression{
    private String varName = null;
    private Object value = null;

    public ASTVariable(int id) {
	super(id);
    }

    public ASTVariable(ExpressionParser p, int id) {
	super(p, id);
    }

    public int getReturnType(){
	if(value instanceof Number)
	    return Expression.NUMERICAL;
	else if(value instanceof Boolean)
	    return Expression.BOOLEAN;
	else if(value instanceof String)
		return Expression.CATEGORICAL;
	else
	    return Expression.UNKNOWN;
    }

    public Object getValue() throws ExecError{
	if(value == null){
	    System.err.println("Warning: uninitialized variable.");
	    return new Double(0.0);
	}

	return value;
    }

    public boolean getBooleanValue() throws ExecError{
	if(value == null){
	    System.err.println("Warning: uninitialized variable.");
	    return false;
	}

	if(value instanceof Boolean)
	    return ((Boolean)value).booleanValue();
	else if(value instanceof Number)
	    return (((Number)value).intValue() != 0);
	else
	    throw new ExecError("Unsupport data type: " +
					    value.getClass());
    }

    public double getDoubleValue() throws ExecError{
	if(value == null){
	    System.err.println("Warning: uninitialized variable.");
	    return 0.0;
	}

	if(value instanceof Number)
	    return ((Number)value).doubleValue();
	else if(value instanceof Boolean){
	    boolean bValue = ((Boolean)value).booleanValue();
	    return (bValue)?(1):(0);
	}
	else
	    throw new ExecError("Unsupport data type: " +
					   value.getClass());
    }

    public String toString(){
	return varName;
    }

    void setVarName(String name){
	if(name == null)
	    throw new IllegalArgumentException("Null variable name");

	varName = name;
    }

    public String getVarName(){
	return varName;
    }

    public Object getVarValue(){
	return getValue();
    }

    public void setVarValue(Object v){
	value = v;
    }

    public void assign(VariableExpression var){
	value = var.getVarValue();
    }
    
    public String derivativeString(String symbol) throws ExecError{
    		if(varName.equals(symbol))
    			return "1";
    		else 
    			return "0";
    }
}
