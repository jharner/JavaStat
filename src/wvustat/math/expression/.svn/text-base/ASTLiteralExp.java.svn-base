/* Generated By:JJTree: Do not edit this line. ASTLiteralExp.java */

package wvustat.math.expression;

public class ASTLiteralExp extends Expression implements ConstantExpression{
    private Object value = null;

    public ASTLiteralExp(int id) {
	super(id);
    }

    public ASTLiteralExp(ExpressionParser p, int id) {
	super(p, id);
    }

    public int getReturnType(){
	if(value instanceof Number)
	    return Expression.NUMERICAL;
	else if(value instanceof Boolean)
	    return Expression.BOOLEAN;
	else if(value instanceof String)
		return Expression.CATEGORICAL;
	else
	    return Expression.UNKNOWN;
    }

    //Literals only can be initialized once.
    public void setInitValue(Object v) throws IllegalArgumentException{
	if(value == null)
	    value = v;
	else
	    throw new IllegalArgumentException("Constant has been " +
					       " initialized.");
    }

    public Object getValue() throws ExecError{
	if(value == null){
	    System.err.println("Warning: uninitialized constant.");
	    return new Double(0.0);
	}

	return value;
    }

    public boolean getBooleanValue() throws ExecError{
	if(value == null){
	    System.err.println("Warning uninitialized constant.");
	    return false;
	}

	if(value instanceof Boolean)
	    return ((Boolean)value).booleanValue();
	else if(value instanceof Number)
	    return (((Number)value).intValue() != 0);
	else
	    throw new ExecError("Unsupport data type: " +
					    value.getClass());
    }

    public double getDoubleValue() throws ExecError{
	if(value == null){
	    System.err.println("Warning: uninitialized constant.");
	    return 0.0;
	}

	if(value instanceof Number)
	    return ((Number)value).doubleValue();
	else if(value instanceof Boolean){
	    boolean bValue = ((Boolean)value).booleanValue();
	    return (bValue)?(1):(0);
	}
	else
	    throw new ExecError("Unsupport data type: " +
					   value.getClass());
    }

    public String toString(){
    	if (value == null)
    		return "";
    	else if (value instanceof String)
    		return "\"" + value.toString() + "\"";
    	else 
    		return value.toString();
    }
    
    public String derivativeString(String symbol) throws ExecError{
    	return "0";
    }
}
