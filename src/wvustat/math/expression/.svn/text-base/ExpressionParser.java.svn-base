/* Generated By:JJTree&JavaCC: Do not edit this line. ExpressionParser.java */
package wvustat.math.expression;

import java.io.*;
import java.util.*;

public class ExpressionParser/*@bgen(jjtree)*/implements ExpressionParserTreeConstants, ExpressionParserConstants {/*@bgen(jjtree)*/
  protected JJTExpressionParserState jjtree = new JJTExpressionParserState();public ExpressionParser(){
        this(new StringReader(""));
    }

        private static String compact(String str)
        {
                StringBuffer buf = new StringBuffer(str.length());
                for (int i = 0; i < str.length(); i++)
                {
                        if (str.charAt(i) != ' ' && str.charAt(i) != '\t' && str.charAt(i) != '\n' && str.charAt(i) != '\r')
                        {
                                buf.append(str.charAt(i));
                        }
                }

                return buf.toString();
        }

        private static String fillAsterisk(String str) throws ParseException
        {
                StringBuffer buf = new StringBuffer(str.length());
                StringTokenizer st = new StringTokenizer(compact(str), "+-*/^&|!=<>(),", true);

                String lastToken = "";
                if(st.hasMoreTokens()){
                        lastToken = st.nextToken();
                        buf.append(isComposite(lastToken)? composite(lastToken): lastToken);
                }


                while (st.hasMoreTokens())
        {
            String token = st.nextToken();
            if (        (isNumber(lastToken,false) && "(".equals(token)) ||
                        (")".equals(lastToken) && (isNumber(token,true) || isComposite(token)) ) ||
                                (")".equals(lastToken) && "(".equals(token)) ||
                        (")".equals(lastToken) && isIdentifier(token)) )
            {
                        buf.append("*");
            }

            if ( isIdentifier(lastToken) && "(".equals(token))
            {
                        if (FuncImplementation.getInstance(lastToken) == null)
                                throw new ParseException("Unsupported function: " + lastToken);
            }

            buf.append(isComposite(token)? composite(token): token);
            lastToken = token;
        }

                return buf.toString();
        }

        private static boolean isNumber(String s, boolean endwithE){
                try{
                        if (endwithE && (s.charAt(s.length()-1) == 'e' || s.charAt(s.length()-1) == 'E'))
                                Double.parseDouble(s.substring(0, s.length()-1));
                        else
                                Double.parseDouble(s);
                }catch(NumberFormatException ex){
                        return false;
                }

                return true;
        }

        private static boolean isComposite(String s){
                if(isNumber(s, true)) return false;

                boolean ret = false;
                int i = s.length() - 1;
                while (!ret && i >= 1){
                        String numPart = s.substring(0, i);
                        String varPart = s.substring(i);
                        if (isNumber(numPart, false) && isIdentifier(varPart) && !varPart.equalsIgnoreCase("e"))
                                ret = true;
                        i--;
                }
                return ret;
        }

        private static String extractNumber(String s){
                int i = s.length() - 1;
                while (i >= 1){
                        String numPart = s.substring(0, i);
                        String varPart = s.substring(i);
                        if (isNumber(numPart, false) && isIdentifier(varPart) && !varPart.equalsIgnoreCase("e"))
                                return numPart;
                        i--;
                }
                return "";
        }

        private static String composite(String s){
                String numPart = extractNumber(s);
                String varPart = s.substring(numPart.length());
                return numPart + "*" + varPart;
        }

        private static boolean isIdentifier(String s){
                if ( s.charAt(0) != '_' && !Character.isLetter(s.charAt(0)) )
                        return false;

                boolean ret = true;
                int i = 1;
                while (ret && i < s.length()){
                        if ( s.charAt(i) != '_' && !Character.isLetterOrDigit(s.charAt(i)) )
                                ret = false;
                        i++;
                }
                return ret;
        }

    public Expression parse(String exp) throws ParseException{
        ReInit(new StringReader(fillAsterisk(fillAsterisk(exp))));
        return start();
    }

    public static void main(String args[]){
        System.out.println("Expression Parser test. Please enter " +
                           "expressions (one per line):");
        System.out.println("Enter EXIT to quit the program.");
        System.out.print(">");

        try{
            BufferedReader reader =
                new BufferedReader(new InputStreamReader(System.in));
            ExpressionParser ep = new ExpressionParser();
            String s = null;
            while((s = reader.readLine()) != null){
                if(s.equals("EXIT"))
                    break;
                try{
                           System.out.println("fill asterisk: " + fillAsterisk(s));
                    Expression exp = ep.parse(s);
                    System.out.println("Parsed expression: " + exp.toString());

                    System.out.println("Variables:");
                    Map varMap = exp.getVariables();
                    Iterator it = varMap.keySet().iterator();
                    while(it.hasNext()){
                        String v = (String)it.next();
                        System.out.println("Variable name: " + v);
                    }
                    Vector v = exp.getVariableNames();
                    Map map=new HashMap();
                    for(int i=0; i<v.size(); i++){
                           System.out.println("Variable name: " + v.elementAt(i));
                           map.put(v.elementAt(i), new Double(1.0));
                    }

                    exp.setVariables(map);
                    System.out.println("Value: " + exp.getValue());
                    System.out.println("derivative: " + exp.derivativeString("x") );
                    Expression derivExp;
                    System.out.println("derivative: " + (derivExp = ep.parse(exp.derivativeString("x"))) );
                    System.out.println("derivative value: " + derivExp.value(map));
                }catch(Exception e){
                    System.out.println(e.toString());
                }catch(Error err){
                           System.out.println(err.toString());
                }

                System.out.print(">");
            }
            System.out.println("\nBye.");
        }catch(Exception e){
            System.out.println("Exception: " + e);
        }
    }

  final public Expression start() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM_LITERAL:
    case BOOL_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case NOT:
    case PLUS:
    case MINUS:
    case 26:
      expression();
      jj_consume_token(0);
                         {if (true) return (Expression)jjtree.popNode();}
      break;
    case 0:
      jj_consume_token(0);
            {if (true) throw new ParseException("Empty expression");}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void expression() throws ParseException {
    orExpression();
  }

  final public void orExpression() throws ParseException {
    Token op;
    andExpression();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
                    ASTLogicalExp jjtn001 = new ASTLogicalExp(JJTLOGICALEXP);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
      try {
        op = jj_consume_token(OR);
        andExpression();
                                                 jjtree.closeNodeScope(jjtn001,  2);
                                                 jjtc001 = false;
     jjtn001.setOperator(op.image);
      } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte001;}
                    }
                    if (jjte001 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte001;}
                    }
                    {if (true) throw (Error)jjte001;}
      } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  2);
                    }
      }
    }
  }

  final public void andExpression() throws ParseException {
    Token op;
    relationalExpression();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
                              ASTLogicalExp jjtn001 = new ASTLogicalExp(JJTLOGICALEXP);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
      try {
        op = jj_consume_token(AND);
        relationalExpression();
                                                                   jjtree.closeNodeScope(jjtn001,  2);
                                                                   jjtc001 = false;
        jjtn001.setOperator(op.image);
      } catch (Throwable jjte001) {
                              if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte001 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte001;}
                              }
                              if (jjte001 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte001;}
                              }
                              {if (true) throw (Error)jjte001;}
      } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  2);
                              }
      }
    }
  }

  final public void relationalExpression() throws ParseException {
    Token op;
    addictiveExpression();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case EQ:
      case GE:
      case LE:
      case NE:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
          ASTComparisonExp jjtn001 = new ASTComparisonExp(JJTCOMPARISONEXP);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GT:
          op = jj_consume_token(GT);
          break;
        case LT:
          op = jj_consume_token(LT);
          break;
        case EQ:
          op = jj_consume_token(EQ);
          break;
        case GE:
          op = jj_consume_token(GE);
          break;
        case LE:
          op = jj_consume_token(LE);
          break;
        case NE:
          op = jj_consume_token(NE);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        addictiveExpression();
                                 jjtree.closeNodeScope(jjtn001,  2);
                                 jjtc001 = false;
              jjtn001.setOperator(op.image);
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
      }
    }
  }

  final public void addictiveExpression() throws ParseException {
    Token op;
    multiplicativeExpression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
          ASTAddictiveExp jjtn001 = new ASTAddictiveExp(JJTADDICTIVEEXP);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          op = jj_consume_token(PLUS);
          break;
        case MINUS:
          op = jj_consume_token(MINUS);
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        multiplicativeExpression();
                                                                  jjtree.closeNodeScope(jjtn001,  2);
                                                                  jjtc001 = false;
            jjtn001.setOperator(op.image);
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
      }
    }
  }

  final public void multiplicativeExpression() throws ParseException {
    Token op;
    unaryExpression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
      case DIV:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
          ASTMultiplicativeExp jjtn001 = new ASTMultiplicativeExp(JJTMULTIPLICATIVEEXP);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MUL:
          op = jj_consume_token(MUL);
          break;
        case DIV:
          op = jj_consume_token(DIV);
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        unaryExpression();
                                                      jjtree.closeNodeScope(jjtn001,  2);
                                                      jjtc001 = false;
            jjtn001.setOperator(op.image);
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
      }
    }
  }

  final public void unaryExpression() throws ParseException {
    Token op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case PLUS:
    case MINUS:
      ASTUnaryExp jjtn001 = new ASTUnaryExp(JJTUNARYEXP);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          op = jj_consume_token(PLUS);
          break;
        case MINUS:
          op = jj_consume_token(MINUS);
          break;
        case NOT:
          op = jj_consume_token(NOT);
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        exponentialExpression();
      jjtree.closeNodeScope(jjtn001,  1);
      jjtc001 = false;
        jjtn001.setOperator(op.image);
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  1);
      }
      }
      break;
    case NUM_LITERAL:
    case BOOL_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case 26:
      exponentialExpression();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void exponentialExpression() throws ParseException {
    Token op;
    notPlusMinusUnaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POWER:
          ASTExponentialExp jjtn001 = new ASTExponentialExp(JJTEXPONENTIALEXP);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        op = jj_consume_token(POWER);
        unaryExpression();
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
  }

  final public void notPlusMinusUnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM_LITERAL:
    case BOOL_LITERAL:
    case STRING_LITERAL:
      constant();
      break;
    default:
      jj_la1[12] = jj_gen;
      if (jj_2_1(2147483647)) {
        function();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 26:
          jj_consume_token(26);
          expression();
          jj_consume_token(27);
          break;
        case IDENTIFIER:
          variable();
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void constant() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM_LITERAL:
     ASTLiteralExp jjtn001 = new ASTLiteralExp(JJTLITERALEXP);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
      try {
        t = jj_consume_token(NUM_LITERAL);
                         jjtree.closeNodeScope(jjtn001,  0);
                         jjtc001 = false;
        jjtn001.setInitValue(new Double(t.image));
      } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001,  0);
     }
      }
      break;
    case BOOL_LITERAL:
      ASTLiteralExp jjtn002 = new ASTLiteralExp(JJTLITERALEXP);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        t = jj_consume_token(BOOL_LITERAL);
                           jjtree.closeNodeScope(jjtn002,  0);
                           jjtc002 = false;
        jjtn002.setInitValue(new Boolean(t.image));
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  0);
      }
      }
      break;
    case STRING_LITERAL:
      ASTLiteralExp jjtn003 = new ASTLiteralExp(JJTLITERALEXP);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      try {
        t = jj_consume_token(STRING_LITERAL);
                             jjtree.closeNodeScope(jjtn003,  0);
                             jjtc003 = false;
        jjtn003.setInitValue(t.image.substring(1, t.image.length()-1));
      } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003,  0);
      }
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void function() throws ParseException {
    String funcName;
    int numOfArg = 0;
      ASTFuncExp jjtn001 = new ASTFuncExp(JJTFUNCEXP);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    try {
      funcName = identifier();
          jjtn001.setFunctionName(funcName);
      jj_consume_token(26);
      numOfArg = argumentList();
      jj_consume_token(27);
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  numOfArg);
      }
    }
  }

  final public int argumentList() throws ParseException {
    int numOfArg = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM_LITERAL:
    case BOOL_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case NOT:
    case PLUS:
    case MINUS:
    case 26:
      expression();
                       numOfArg++;
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 28:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_6;
        }
        jj_consume_token(28);
        expression();
                            numOfArg++;
      }
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
        {if (true) return numOfArg;}
    jj_consume_token(27);
    throw new Error("Missing return statement in function");
  }

  final public void variable() throws ParseException {
    String varName;
      ASTVariable jjtn001 = new ASTVariable(JJTVARIABLE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    try {
      varName = identifier();
       jjtree.closeNodeScope(jjtn001,  0);
       jjtc001 = false;
         jjtn001.setVarName(varName);
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  0);
      }
    }
  }

  final public String identifier() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
        {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(26)) return true;
    return false;
  }

  public ExpressionParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x4700361,0x80000,0x40000,0x3f000,0x3f000,0x600000,0x600000,0x1800000,0x1800000,0x700000,0x4700360,0x2000000,0x160,0x4000200,0x160,0x10000000,0x4700360,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public ExpressionParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public ExpressionParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ExpressionParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ExpressionParser(ExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(ExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[29];
    for (int i = 0; i < 29; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 29; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
