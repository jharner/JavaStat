/* Generated By:JJTree: Do not edit this line. ASTUnaryExp.java */

package wvustat.math.expression;

public class ASTUnaryExp extends Expression{
    private String operator = null;

    public ASTUnaryExp(int id){
	super(id);
    }

    public ASTUnaryExp(ExpressionParser p, int id){
	super(p, id);
    }

    public int getReturnType(){
	if("!".equals(operator))
	    return Expression.BOOLEAN;
	else if("+".equals(operator) || "-".equals(operator))
	    return Expression.NUMERICAL;

	return Expression.UNKNOWN;
    }

    public void setOperator(String op){
	operator = op;
    }

    public String getOperator(){
	return operator;
    }

    public Object getValue() throws ExecError{
	if("!".equals(operator))
	    return 
		new Boolean(!((Expression)jjtGetChild(0)).getBooleanValue());
	else if("-".equals(operator))
	    return new Double(0.0 - 
			      ((Expression)jjtGetChild(0)).getDoubleValue());

	return ((Expression)jjtGetChild(0)).getValue();
    }

    public boolean getBooleanValue() throws ExecError{
	boolean bValue = ((Expression)jjtGetChild(0)).getBooleanValue();

	if("!".equals(operator))
	    return !bValue;

	return bValue;
    }

    public double getDoubleValue() throws ExecError{
	double dValue = ((Expression)jjtGetChild(0)).getDoubleValue();

	if("-".equals(operator))
	    return 0.0 - dValue;
	else if("!".equals(operator)){
	    int iValue = (new Double(dValue)).intValue();
	    return (iValue == 0)?(1.0):(0.0);
	}
	
	return dValue;
    }

    public String toString(){
	return operator + "(" + jjtGetChild(0).toString() + ")";
    }
    
    public String derivativeString(String symbol) throws ExecError{
    		if("+".equals(operator) || "-".equals(operator))
    			return operator + "(" + ((Expression)jjtGetChild(0)).derivativeString(symbol) + ")";
    		else
    			throw new ExecError("Can not take derivative of this function!");
    }
}
