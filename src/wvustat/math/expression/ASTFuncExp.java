/* Generated By:JJTree: Do not edit this line. ASTFuncExp.java */

package wvustat.math.expression;

import java.util.*;

public class ASTFuncExp extends Expression{
    String funcName = null;
    FuncImplementation implementation = null;

    public ASTFuncExp(int id) {
	super(id);
    }

    public ASTFuncExp(ExpressionParser p, int id) {
	super(p, id);
    }

    public void setFunctionName(String name){
	if(name == null)
	    throw new IllegalArgumentException("null function name.");
	funcName = name;
	implementation = FuncImplementation.getInstance(name);
    }

    public String getFunctionName(){
	return funcName;
    }

    public int getReturnType(){
	if(implementation == null)
	    throw new NullPointerException("Unimplemented function " + funcName);

	return implementation.getReturnType(parameterList());
    }

    public Object getValue() throws ExecError{
	if(implementation == null)
	    throw new ExecError("Unimplemented function " + funcName);

	return implementation.getValue(parameterList());
    }

    public boolean getBooleanValue() throws ExecError{
	if(implementation == null)
	    throw new ExecError("Unimplemented function " + funcName);

	Object value = implementation.getValue(parameterList());
	if(value instanceof Boolean)
	    return ((Boolean)value).booleanValue();
	else if(value instanceof Number)
	    return (((Number)value).intValue() != 0);
	else
	    throw new ExecError("Unsupport data type: " +
					    value.getClass());
    }

    public double getDoubleValue() throws ExecError{
	if(implementation == null)
	    throw new ExecError("Unimplemented function " + funcName);

	Object value = implementation.getValue(parameterList());
	if(value instanceof Number)
	    return ((Number)value).doubleValue();
	else if(value instanceof Boolean){
	    boolean bValue = ((Boolean)value).booleanValue();
	    return (bValue)?(1):(0);
	}
	else
	    throw new ExecError("Unsupport data type: " +
					   value.getClass());
    }

    public String toString(){
	StringBuffer sb = new StringBuffer();
	sb.append(funcName + "(");
	if(jjtGetNumChildren() > 0)
	    sb.append(jjtGetChild(0).toString());

	for(int i = 1; i < jjtGetNumChildren(); i++)
	    sb.append(", " + jjtGetChild(i));

	sb.append(")");

	return sb.toString();
    }

    private List parameterList() throws ExecError{
	Vector pList = new Vector();

	for(int i = 0; i < jjtGetNumChildren(); i++)
	    pList.add((Expression)jjtGetChild(i));

	return pList;
    }
    
    public String derivativeString(String symbol) throws ExecError{
    	if(implementation == null)
    	    throw new ExecError("Unimplemented function " + funcName);

    	return implementation.derivative(parameterList(), symbol);
    }
}
